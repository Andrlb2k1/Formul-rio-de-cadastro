class Valid {
  constructor() {
    this.validations = [
      "data-min-length", "data-max-length", "data-only-letters", "data-equal", "data-email-validate", "data-password-validate", "data-required"
    ]
  }
   val(form) {
    let currentValidations = document.querySelectorAll("form .error-validation");
    if(currentValidations.length) {
      this.cleanValidations(currentValidations);
  }
  let inps = form.getElementsByTagName('input');
  let inpA = [...inps];
  inpA.forEach(function(inp, obj) {
        for(let j = 0; j < this.validations.length; j++) {
          if(inp.getAttribute(this.validations[j] != null)) {
          let method = this.validations[j].replace("data-", "").replace("-", "");
        let value = inp.getAttribute(this.validations[j]);
        this[method](inp, value);
      }       
    }
   }, this);
 }
  req(inp) {
    let inpV = inp.value;
    if(inpV === "") {
      let errMes = `Este campo deve ser preenchido obrigatoriamente!!!`;
      this.printMessage(inp, errMes);
    }
  }
  emailValid(inp) {
    let email = inp.value;
    let errMes = `Insira neste campo um email no padrão example@email.com !!!`;
    let rst = /\S+@\S+\.\S+/;
    if(!rst.test(email)) {
      this.printMessage(inp, errMes);
    }
  }
  passValid(inp) {
    let chAr = inp.value.split("");
    let nums = 0;
    let upcs = 0;
    for (let k = 0; k < chAr.length; k++) {
      if (chAr[k] === chAr[k].toUpperCase() && isNaN(parseInt(chAr[k]))) {
        upcs++;
      }else if(!isNaN(parseInt(chAr[k]))) {
        nums++;
      }
    }
    if(upcs === 0 || nums === 0) {
      let errMes = `A senha necessita, no mínimo, de um caractere maiúsculo e um número!!!`;
      this.printMessage(inp, errMes);
    }
  }
  equal(input, inpN) {
      let inpComp = document.getElementsByName(inpN)[0];
      let errMes = `Este campo deve estar igual ao ${inpN}!!!`;
      if(input.value != inpComp.value) {
        this.printMessage(input, errMes);
    }
  }
  minLen(inp, minV) {
    let inpLen = inp.value.length;
    let errMes = `O campo necessita de, no mínimo, ${minV} caracteres!!!`;
     if(inpLen < minV) {
      this.printMessage(inp, errMes);
    }
  }
  maxLen(inp, maxV) {
    let inpLen = inp.value.length;
    let errMes = `O campo necessita ter menos que ${maxV} caracteres!!!`;
     if(inpLen > maxV) {
      this.printMessage(inp, errMes);
    }
  }
  onlyLetters(inp) {
    let inpV = inp.value;
    let errMes = `Este campo não aceita números e nem caracteres especiais!!!`;
    let rst = /^[A-Za-z]+$/;;
    if(!rst.test(inpV)) {
      this.printMessage(inp, errMes);
    }
  }
  printM(inp, mes) {
    let errQt = inp.parentNode.querySelector(".error-validation");
    if(errQt === null) {
      let tmp = document.querySelector(".error-validation").cloneNode(true);
      tmp.textContent(mes);
      let inpPar = inp.parentNode;
      tmp.classList.remove("template");
      inpPar.appendChild(tmp);
    }
  }
  clVal(vld) {
    vld.forEach(elmt => elmt.remove());
  }
}
let sbmt = document.getElementById("bt");
let fm = document.getElementById("regf");
let vl = new Valid();
sbmt.addEventListener("click", function(qf) {
  qf.preventDefault();
  vl.validate(fm);
});
